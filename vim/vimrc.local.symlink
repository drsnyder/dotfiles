"-------------------------------------------------------------------------------
" Tabs & Formatting
"-------------------------------------------------------------------------------
set shell=/bin/sh
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent
set smartindent
set nu
"set nobackup
"set nowritebackup
set noswapfile
set mouse=a

" List chars
set listchars=""          " Reset the listchars
set listchars=tab:\ \     " a tab should display as "  ", trailing whitespace as "."
set listchars+=trail:.    " show trailing spaces as dots
set listchars+=extends:>  " The character to show in the last column when wrap is
                          " off and the line continues beyond the right of the screen
set listchars+=precedes:< " The character to show in the last column when wrap is
                          " off and the line continues beyond the right of the screen

" disable by default
set nolist


" Huddler whitespace conventions: use tabs, 4 space width
fun! SetHuddlerWhitespace()
  "Ignore certain filetypes
  if &ft =~ 'clojure'
    return
  endif
  setlocal ts=4 sts=4 sw=4 noexpandtab
endfun

fun! SetWikiaPHPWhitespace()
  setlocal ts=2 sts=2 sw=2 noexpandtab nofoldenable nolist
endfun

fun! DisableParedit()
	let g:paredit_mode=0
endfun

fun! EnableParedit()
	let g:paredit_mode=1
endfun



if (exists('g:local_dev'))
  if (g:local_dev ==? "huddler")
    autocmd BufNewFile,BufRead */huddler/* call SetHuddlerWhitespace()
  elseif (g:local_dev ==? "wikia")
    autocmd BufNewFile,BufRead *.php call SetWikiaPHPWhitespace()
  endif
endif

" Disable folding
set nofoldenable
let g:DisableAutoPHPFolding = 1 " make sure PIV isn't folding

" Automatically read
set autoread


"" Clojure
augroup ft_clojure
  au!
  au FileType clojure setlocal lispwords+=describe,it,testing,facts,fact,provided,defroutes,defproject
  au FileType clojure setlocal lispwords+=with-connection,with-query-results,with-naming-strategy,with-quoted-identifiers,update-or-insert-values,insert-record,delete-rows,insert!
  au FileType clojure setlocal lispwords+=sql/with-connection,sql/with-query-results,sql/with-naming-strategy,sql/with-quoted-identifiers,sql/update-values,sql/insert-record,sql/insert-records,sql/insert!,sql/delete-rows
  "" ClojureScript separate filetype?
  au FileType clojure setlocal lispwords+=this-as

  " Indent top-level form.
  au FileType clojure nmap <buffer> <localleader>= mz99[(v%='z
  "" TODO: visual bindings
  au Filetype clojure nnoremap <localleader>ee :Eval<CR>
  au Filetype clojure nnoremap <localleader>ef :%Eval<CR>
  au Filetype clojure nnoremap <localleader>er :Require<CR>
  au Filetype clojure nnoremap <localleader>eR :Require!<CR>

	au FileType clojure nnoremap <localleader>dpe :call DisableParedit()<CR>
	au FileType clojure nnoremap <localleader>epe :call EnableParedit()<CR>
augroup END

"" Go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>rename <Plug>(go-rename)
" don't jump to the errors
let g:go_jump_to_error = 0

"-------------------------------------------------------------------------------
" Colors
"-------------------------------------------------------------------------------
" Clear color on vim-gitgutter gutter
au VimEnter * highlight clear SignColumn

" Highlight 81st column
" This can also be disabled with: 'set[local] colorcolumn='
" set textwidth=80
" set colorcolumn=+1
" hi ColorColumn guibg=#2d2d2d ctermbg=246


" Safely alias :we to :w
cnoreabbrev <expr> we ((getcmdtype() is# ':' && getcmdline() is# 'w')?('we'):('w'))


"-------------------------------------------------------------------------------
" Plugin Settings
"-------------------------------------------------------------------------------

" kein/rainbow_parens.vim
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" jslint
let $JS_CMD='node'


" VimClojure / Clojure
"let g:vimclojure#WantNailgun = 1
"let g:vimclojure#NailgunClient = $HOME."/vimclojure/client/ng"
"let g:vimclojure#HighlightBuiltins = 1
"let g:vimclojure#DynamicHighlighting = 1
"let g:vimclojure#ParenRainbow = 1
"let g:vimclojure#SetupKeyMapEvalToplevel = 0
"let g:vimclojure#SetupKeyMapRunTests = 0
"let vimclojure#SplitPos = "right"

" Paredit
"let g:paredit_electric_return=1
noremap <leader>dpare :let g:paredit_mode = 0<CR>
noremap <leader>epare :let g:paredit_mode = 1<CR>

" rename variable
nnoremap <Leader>r :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>

" Syntastic
let g:syntastic_auto_loc_list = 1
let g:syntastic_javascript_jsl_conf = "-conf ~/.jslconf"
let g:syntastic_mode_map = {
    \ 'mode': 'active',
    \ 'active_filetypes': [],
    \ 'passive_filetypes': ['sass', 'scss']
  \}

" CtrlP
let g:ctrlp_switch_buffer = 0
let g:ctrlp_user_command = {
    \ 'types': {
      \ 1: ['.git', 'cd %s && git ls-files'],
      \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      \ },
    \ 'fallback': 'find %s -type f'
  \ }

" Ack
nnoremap <leader>ack :Ack!<space>
let g:ackprg = 'ack --ignore-dir logs --ignore-dir tmp --ignore-dir vendor --ignore-dir log --nogroup --nocolor --column'

" Tagbar
"" Move focus to tagbar when it opens to make it usable for windows on right side
"let g:tagbar_autofocus = 1

" Tabularize
nmap <Leader>a- :Tabularize /=><CR>
vmap <Leader>a- :Tabularize /=><CR>

" vim-indent-guides
"let g:indent_guides_enable_on_vim_startup = 0

" vim-gitgutter
let g:gitgutter_eager = 0

"-------------------------------------------------------------------------------
" General Settings & Modifications
"-------------------------------------------------------------------------------
" Disable session dialog
let g:session_autosave='no'

" Enable filetype plugin
filetype plugin on

" Tabline modifications
if has('gui')
  set guioptions-=e
else
  if &term == 'xterm' || &term == 'screen'
    let g:CSApprox_loaded = 1
  endif
endif

"if exists("+showtabline")
  "function! MyTabLine()
    "let s = ''
    "let t = tabpagenr()
    "let i = 1
    "while i <= tabpagenr('$')
      "let buflist = tabpagebuflist(i)
      "let winnr = tabpagewinnr(i)
      "let s .= '%' . i . 'T'
      "let s .= (i == t ? '%1*' : '%2*')
      "let s .= ' '
      "let s .= i . ':'
      "let s .= winnr . '/' . tabpagewinnr(i,'$')
      "let s .= ' %*'
      "let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
      "let bufnr = buflist[winnr - 1]
      "let file = bufname(bufnr)
      "let buftype = getbufvar(bufnr, 'buftype')
      "if buftype == 'nofile'
        "if file =~ '\/.'
          "let file = substitute(file, '.*\/\ze.', '', '')
        "endif
      "else
        "let file = fnamemodify(file, ':p:t')
      "endif
      "if file == ''
        "let file = '[No Name]'
      "endif
      "let s .= file
      "let i = i + 1
    "endwhile
    "let s .= '%T%#TabLineFill#%='
    "let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
    "return s
  "endfunction
  "set stal=2
  "set tabline=%!MyTabLine()
"endif


" My movement customizations 
nmap <leader>tn <Esc>:tabn<CR>
nmap <leader>tp <Esc>:tabp<CR>
noremap <leader>pl :!php -l %<CR>
iabbrev Damon Damon Snyder (damon@huddler-inc.com)
iabbrev Author:: Author:: Damon Snyder (mailto:damon@huddler-inc.com) 

" disable beeping
set noerrorbells
set visualbell
set t_vb=
"set statusline=%t\ %y\ [%c,%l]\ %m\ %{fugitive#statusline()}
"set laststatus=2

let mapleader = ","
let maplocalleader = ","
" quick way to disable the hlsearch
nmap <silent> <leader>n :silent :nohlsearch<CR>

" Don't autoclose comments in vim
let g:autoclose_vim_commentmode = 1

" Slime config
let g:slime_paste_file = tempname()
let g:slime_target = "tmux"

let vimrplugin_screenplugin = 0

" colorscheme ir_black
syntax enable
set background=dark
colorscheme solarized

let g:syntastic_check_on_open=0
let g:syntastic_php_checkers=['/usr/bin/php']
let g:gitgutter_realtime = 0

let vimrplugin_assign = 2

"" don't commit
"let g:vdebug_options = {
"\	'path_maps': {
"\ 	"/archive/var/www/html/drsnyder/v2": "/Users/damonsnyder/Huddler/source/huddler/v2",
"\ 	"/archive/var/www/html/drsnyder/tools/cli": "/Users/damonsnyder/Huddler/source/huddler/tools/cli",
"\  },
"\}

hi Visual term=reverse cterm=reverse guibg=Grey

" Python
" autocmd BufWritePost *.py call Flake8()
au BufNewFile,BufRead *.py 
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

let python_highlight_all=1
syntax on

"au FileType python setlocal formatprg=autopep8\ -
"if has("autocmd")
  "autocmd BufWritePost *.py silent! execute "!autopep8 -i % 2>&1 /dev/null"
"endif

" https://stackoverflow.com/a/24449080/8243
au FileType python setlocal formatprg=autopep8\ -aa\ --indent-size\ 0\ -

au BufNewFile,BufRead *.js,*.html,*.css
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif
